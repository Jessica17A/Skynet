@page
@model SkyNet.Areas.Identity.Pages.Account.RegisterModel
@{
    ViewData["Title"] = "Registrar usuario de empleado";
}

<style>
    /* Header morado con esquinas redondeadas y texto centrado */
    .card-header.header-purple {
        background: #635bff;
        color: #fff;
        border-top-left-radius: 1rem !important;
        border-top-right-radius: 1rem !important;
        text-align: center;
    }
    .card.rounded-4 { border-radius: 1rem; }
</style>

<div class="container py-4">
    <div class="row justify-content-center">
        <div class="col-lg-7 col-md-9">
            <div class="card shadow-sm border-0 rounded-4">
                <div class="card-header header-purple">
                    <h5 class="mb-0">
                        <i class="bi bi-person-plus"></i>
                        @ViewData["Title"]
                    </h5>
                </div>

                <div class="card-body p-4">
                    <p class="text-muted mb-4 text-center">
                        Crea un usuario de acceso seleccionando un empleado y asignando un rol.
                        La contraseña debe cumplir con las políticas definidas por el sistema.
                    </p>
                    <hr class="my-4" />

                    <form method="post" id="registerForm">
                        <div asp-validation-summary="ModelOnly" class="alert alert-danger py-2 d-none" id="valSummary"></div>

                        <!-- Empleado -->
                        <div class="mb-3">
                            <label asp-for="Input.EmpleadoId" class="form-label fw-semibold"></label>
                            <select asp-for="Input.EmpleadoId" class="form-select" asp-items="Model.EmpleadosOptions">
                                <option value="">Selecciona un empleado...</option>
                            </select>
                            <span asp-validation-for="Input.EmpleadoId" class="text-danger small"></span>
                        </div>

                        <!-- Rol -->
                        <div class="mb-3">
                            <label asp-for="Input.RoleName" class="form-label fw-semibold"></label>
                            <select asp-for="Input.RoleName" class="form-select" asp-items="Model.RolesOptions">
                                <option value="">Selecciona un rol...</option>
                            </select>
                            <span asp-validation-for="Input.RoleName" class="text-danger small"></span>
                        </div>

                        <div class="row g-3">
                            <!-- Contraseña -->
                            <div class="col-md-6">
                                <label asp-for="Input.Password" class="form-label fw-semibold"></label>
                                <div class="input-group">
                                    <input asp-for="Input.Password" class="form-control" id="pwdInput" type="password" />
                                    <button class="btn btn-outline-secondary" type="button" id="togglePwd" aria-label="Mostrar/Ocultar contraseña">
                                        <i class="bi bi-eye"></i>
                                    </button>
                                </div>
                                <span asp-validation-for="Input.Password" class="text-danger small"></span>
                                <div class="form-text">
                                    Usa una combinación de mayúsculas, minúsculas, números y símbolos.
                                </div>
                            </div>

                            <!-- Confirmación -->
                            <div class="col-md-6">
                                <label asp-for="Input.ConfirmPassword" class="form-label fw-semibold"></label>
                                <div class="input-group">
                                    <input asp-for="Input.ConfirmPassword" class="form-control" id="pwd2Input" type="password" />
                                    <button class="btn btn-outline-secondary" type="button" id="togglePwd2" aria-label="Mostrar/Ocultar confirmación">
                                        <i class="bi bi-eye"></i>
                                    </button>
                                </div>
                                <span asp-validation-for="Input.ConfirmPassword" class="text-danger small"></span>
                                <div class="form-text">
                                    Debe coincidir con la contraseña.
                                </div>
                            </div>
                        </div>

                        <div class="d-flex align-items-center gap-2 mt-4">
                            <button type="submit" class="btn btn-primary px-4" id="btnSubmit">
                                <span class="spinner-border spinner-border-sm me-2 d-none" id="btnSpinner" role="status" aria-hidden="true"></span>
                                Crear usuario
                            </button>
                            <a asp-page="/Account/Register" class="btn btn-outline-secondary">Limpiar</a>
                        </div>
                    </form>
                </div>

                <div class="card-footer bg-light rounded-bottom-4">
                    <small class="text-muted">
                        Si no ves el empleado o el rol, verifica que existan en el sistema y estén activos.
                    </small>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <!-- Bootstrap Icons (para el ojito) -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css" />

    @{
        var okMsg = TempData["RegisterMsg"] as string;
        var okJson = System.Text.Json.JsonSerializer.Serialize(okMsg ?? "");
    }
    @if (!string.IsNullOrWhiteSpace(okMsg))
    {
        <script>
            document.addEventListener('DOMContentLoaded', function () {
                Swal.fire({
                    icon: 'success',
                    title: '¡Usuario creado!',
                    text: @Html.Raw(okJson),
                    confirmButtonText: 'Aceptar',
                    allowOutsideClick: false,
                    allowEscapeKey: false
                });
            });
        </script>
    }

    <script>
        // Toggle mostrar/ocultar contraseña con icono
        function wireToggle(inputId, btnId) {
            const input = document.getElementById(inputId);
            const btn = document.getElementById(btnId);
            if (!input || !btn) return;

            const icon = btn.querySelector("i");
            btn.addEventListener("click", () => {
                const isPwd = input.type === "password";
                input.type = isPwd ? "text" : "password";
                icon.classList.toggle("bi-eye", !isPwd);
                icon.classList.toggle("bi-eye-slash", isPwd);
            });
        }
        wireToggle("pwdInput", "togglePwd");
        wireToggle("pwd2Input", "togglePwd2");

        // Spinner y bloqueo para evitar doble submit
        (function () {
            const form = document.getElementById('registerForm');
            const btn = document.getElementById('btnSubmit');
            const spn = document.getElementById('btnSpinner');
            if (!form || !btn || !spn) return;
            form.addEventListener('submit', function () {
                btn.setAttribute('disabled', 'disabled');
                spn.classList.remove('d-none');
            });
        })();

        // Mostrar resumen de validación solo si hay errores
        (function () {
            const valSummary = document.getElementById('valSummary');
            if (!valSummary) return;
            const obs = new MutationObserver(() => {
                const hasItems = valSummary.querySelector('ul li');
                valSummary.classList.toggle('d-none', !hasItems);
            });
            obs.observe(valSummary, { childList: true, subtree: true });
        })();
    </script>
}
