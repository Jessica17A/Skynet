@model SkyNet.Models.DTOs.SolicitudDto
@{
    ViewData["Title"] = "Consultar estado de ticket";
    var hasData = Model != null && !string.IsNullOrWhiteSpace(Model?.Ticket);
    var queryTried = (bool?)ViewBag.QueryTried ?? false;

    // Texto legible por estado
    string Texto(int e) => e switch
    {
        0 => "Rechazado",
        1 => "Pendiente de revisión",
        2 => "Revisada",
        3 => "Aceptada",
        4 => "En proceso",
        5 => "Finalizado",
        _ => "Desconocido"
    };

    // Ícono por estado (Bootstrap Icons)
    string Icono(int e) => e switch
    {
        0 => "bi-x-circle",
        1 => "bi-hourglass-split",
        2 => "bi-eye",
        3 => "bi-check-circle",
        4 => "bi-gear-fill",
        5 => "bi-flag-fill",
        _ => "bi-question-circle"
    };

    // Gradiente y color de acento por estado (para badges e icon containers)
    (string grad, string accent) Colors(int e) => e switch
    {
        0 => ("linear-gradient(135deg,#ff6b6b,#f06595)", "#e03131"),     // rojo/rosa
        1 => ("linear-gradient(135deg,#adb5bd,#ced4da)", "#5c677d"),     // gris moderno
        2 => ("linear-gradient(135deg,#63e6be,#22b8cf)", "#0ca678"),     // aqua/teal
        3 => ("linear-gradient(135deg,#69db7c,#38d9a9)", "#2b8a3e"),     // verde
        4 => ("linear-gradient(135deg,#74c0fc,#4dabf7)", "#1c7ed6"),     // azul
        5 => ("linear-gradient(135deg,#868e96,#343a40)", "#212529"),     // dark elegante
        _ => ("linear-gradient(135deg,#e9ecef,#dee2e6)", "#868e96")
    };

    // Porcentaje de avance (solo para la barra)
    int Pct(int e) => e switch { 0 => 0, 1 => 20, 2 => 40, 3 => 60, 4 => 80, 5 => 100, _ => 0 };
}

<style>
    :root {
        --card-radius: 1rem;
        --soft-shadow: 0 10px 30px rgba(0,0,0,.08);
        --chip-radius: 999px;
    }

    .card.rounded-4 {
        border-radius: var(--card-radius);
        box-shadow: var(--soft-shadow);
    }

    .card-header.header-hero {
        background: linear-gradient(135deg,#7c4dff,#6c63ff 50%,#5a55ff);
        color: #fff;
        text-align: center;
        border-top-left-radius: var(--card-radius) !important;
        border-top-right-radius: var(--card-radius) !important;
        padding: 1.25rem 1rem;
    }

    .header-hero h5 {
        margin: 0;
        letter-spacing: .2px;
    }

    .icon-chip {
        display: inline-flex;
        align-items: center;
        justify-content: center;
        width: 44px;
        height: 44px;
        border-radius: 14px;
        color: #fff;
        box-shadow: inset 0 0 0 2px rgba(255,255,255,.12), var(--soft-shadow);
        transition: transform .18s ease, box-shadow .18s ease;
    }

        .icon-chip.lg {
            width: 56px;
            height: 56px;
            border-radius: 16px;
        }

        .icon-chip:hover {
            transform: translateY(-2px);
            box-shadow: inset 0 0 0 2px rgba(255,255,255,.16), 0 12px 26px rgba(0,0,0,.12);
        }

        .icon-chip i {
            font-size: 1.35rem;
        }

        .icon-chip.lg i {
            font-size: 1.6rem;
        }

    .badge-soft {
        display: inline-flex;
        align-items: center;
        gap: .5rem;
        padding: .6rem .9rem;
        border-radius: 14px;
        font-weight: 600;
        color: #fff;
        box-shadow: var(--soft-shadow);
        border: none; /* quitamos borde bootstrap por claridad */
    }

        .badge-soft i {
            font-size: 1.1rem;
        }

    .meta-chip {
        background: #f8f9fa;
        color: #343a40;
        border: 1px solid #e9ecef;
        border-radius: 12px;
        padding: .45rem .65rem;
        display: inline-flex;
        align-items: center;
        gap: .45rem;
    }

    .progress {
        height: 14px;
        background-color: #f1f3f5;
        border-radius: var(--chip-radius);
    }

    .progress-bar {
        border-radius: var(--chip-radius);
        background-image: linear-gradient(90deg, rgba(255,255,255,.18), rgba(255,255,255,0));
        background-size: 200% 100%;
        animation: shimmer 2.1s linear infinite;
    }
   
    

    .legend .item {
        display: flex;
        align-items: center;
        gap: .45rem;
        padding: .35rem .6rem;
        border-radius: 10px;
    }

    .legend .dot {
        width: 10px;
        height: 10px;
        border-radius: 50%;
        box-shadow: 0 0 0 3px rgba(0,0,0,.04) inset;
    }

    /* Inputs modernillos */
    .input-group .form-control {
        border-radius: 12px;
        border-color: #e9ecef;
    }

    .input-group-text {
        border-radius: 12px;
        background: #f8f9fa;
        border-color: #e9ecef;
    }

    .btn-primary {
        border-radius: 12px;
        box-shadow: var(--soft-shadow);
    }

    .btn-outline-secondary {
        border-radius: 12px;
    }
</style>

<div class="container py-4">
    <div class="row justify-content-center">
        <div class="col-lg-8 col-xl-7">
            <div class="card border-0 rounded-4">
                <div class="card-header header-hero">
                    <h5 class="mb-1"><i class="bi bi-clipboard-check"></i> @ViewData["Title"]</h5>
                    <div class="text-white-50 small">Ingresa el ticket y visualiza su estado con estilo</div>
                </div>

                <div class="card-body p-4">
                    <!-- Buscador por ticket -->
                    <form method="get" class="mb-4" id="trackForm">
                        <label class="form-label fw-semibold">Número de ticket</label>
                        <div class="input-group">
                            <span class="input-group-text"><i class="bi bi-hash"></i></span>
                            <input name="ticket" class="form-control" placeholder="SKY-2025-000123"
                                   value="@(Context.Request.Query["ticket"].ToString())" autocomplete="off" autofocus />
                            <button class="btn btn-primary" type="submit">
                                <i class="bi bi-search"></i> Consultar
                            </button>
                            <a asp-action="Tracking" class="btn btn-outline-secondary">Limpiar</a>
                        </div>
                        <div class="form-text">Ingresa el número exacto del ticket.</div>
                    </form>

                    @if (!hasData && !queryTried)
                    {
                        <div class="text-center text-muted py-5">
                            <div class="icon-chip lg" style="background:linear-gradient(135deg,#c0ebff,#d0bfff);">
                                <i class="bi bi-search"></i>
                            </div>
                            <div class="mt-3">Ingresa el ticket y presiona <strong>Consultar</strong>.</div>
                        </div>
                    }
                    else if (!hasData && queryTried)
                    {
                        <div class="alert alert-warning d-flex align-items-center gap-2">
                            <i class="bi bi-exclamation-triangle-fill"></i>
                            <div>Ticket <strong>@Context.Request.Query["ticket"]</strong> no encontrado.</div>
                        </div>
                    }
                    else
                    {
                        var estadoInt = (int)Model.Estado;
                        var (grad, accent) = Colors(estadoInt);
                        var pct = Pct(estadoInt);

                        <!-- Header de estado con icono grande -->
                        <div class="d-flex align-items-center gap-3 mb-3">
                            <div class="icon-chip lg" style="background:@grad">
                                <i class="bi @Icono(estadoInt)"></i>
                            </div>
                            <div>
                                <div class="badge-soft" style="background:@grad">
                                    <i class="bi @Icono(estadoInt)"></i>
                                    @Texto(estadoInt)
                                </div>
                                <div class="mt-2 d-flex flex-wrap gap-2">
                                    <span class="meta-chip"><i class="bi bi-clipboard"></i> @Model.Ticket</span>
                                    <span class="meta-chip"><i class="bi bi-flag"></i> @Model.Prioridad</span>
                                    <span class="meta-chip"><i class="bi bi-ui-checks-grid"></i> @Model.Tipo</span>
                                </div>
                            </div>
                            <div class="ms-auto text-muted small text-end">
                                <div>Creado</div>
                                <div class="fw-semibold">@Model.CreatedAtUtc.ToLocalTime():g</div>
                            </div>
                        </div>

                        <!-- Barra de progreso con color dinámico -->
                        <div class="mb-3">
                            <div class="progress" style="--accent:@accent;">
                                <div class="progress-bar" style="width:@pct%; background:@grad;"></div>
                            </div>
                        </div>

                        <!-- Leyenda bonita con íconos y puntos de color -->
                        <div class="legend d-flex justify-content-between flex-wrap gap-2 text-muted small">
                            <span class="item"><span class="dot" style="background:#ff6b6b"></span> <i class="bi bi-x-circle text-danger"></i> Rechazado</span>
                            <span class="item"><span class="dot" style="background:#adb5bd"></span> <i class="bi bi-hourglass-split text-secondary"></i> Pendiente</span>
                            <span class="item"><span class="dot" style="background:#63e6be"></span> <i class="bi bi-eye" style="color:#0ca678;"></i> Revisada</span>
                            <span class="item"><span class="dot" style="background:#69db7c"></span> <i class="bi bi-check-circle text-success"></i> Aceptada</span>
                            <span class="item"><span class="dot" style="background:#74c0fc"></span> <i class="bi bi-gear-fill text-primary"></i> En proceso</span>
                            <span class="item"><span class="dot" style="background:#343a40"></span> <i class="bi bi-flag-fill text-dark"></i> Finalizado</span>
                        </div>

                        <!-- (Opcional) Detalles del solicitante -->
                        <div class="border rounded-4 p-3 mt-4" style="background:#f8f9fa; border-color:#eef0f2;">
                            <div class="small text-uppercase text-muted mb-1">Solicitante</div>
                            <div class="d-flex flex-wrap align-items-center gap-3">
                                <div class="icon-chip" style="background:linear-gradient(135deg,#ffd43b,#ffa94d);">
                                    <i class="bi bi-person"></i>
                                </div>
                                <div class="me-auto">
                                    <div class="fw-semibold">@Model.Nombre</div>
                                    <div class="text-muted">@Model.Email</div>
                                </div>
                                @if (!string.IsNullOrWhiteSpace(Model.Telefono))
                                {
                                    <span class="meta-chip"><i class="bi bi-telephone"></i> @Model.Telefono</span>
                                }
                            </div>
                        </div>
                    }
                </div>

                <div class="card-footer bg-light rounded-bottom-4">
                    <small class="text-muted">El tracking se basa únicamente en el estado actual de la solicitud.</small>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <!-- Bootstrap Icons (cárgalo aquí si no está en tu _Layout) -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css" />

    <script>
        // Trim al enviar (evita espacios)
        (function(){
            const form = document.getElementById('trackForm');
            if(!form) return;
            form.addEventListener('submit', ()=>{
                const inp = form.querySelector('input[name="ticket"]');
                if (inp) inp.value = (inp.value || '').trim();
            });
        })();

        // Copiar ticket con feedback visual
        (function(){
            const chip = document.querySelector('.meta-chip i.bi-clipboard')?.parentElement;
            const txt = '@(Model?.Ticket ?? "")';
            if(!chip || !txt) return;
            chip.style.cursor = 'pointer';
            chip.addEventListener('click', async ()=>{
                try{
                    await navigator.clipboard.writeText(txt);
                    chip.classList.add('border','border-success','bg-success-subtle');
                    setTimeout(()=> chip.classList.remove('border','border-success','bg-success-subtle'), 1200);
                }catch{}
            });
        })();
    </script>
}
t